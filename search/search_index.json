{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Python SDK for Alpha-Trader","text":"<p>The user interface can be reached at https://alpha-trader.com</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>You can install the package via pip by cloning the repository and running</p> <pre><code>pip install ./alpha_trader\n</code></pre>"},{"location":"#authentication","title":"Authentication","text":"<p>To use the Python SDK you have to authenticate with a user and a partner id. A partner id can be requested by contacting \"km\" in the Alpha-Trader user interface.</p> <p>Now you can create a client:</p> <pre><code>from alpha_trader.client import Client\n\nclient = Client(username=\"MY_USERNAME\", password=\"MY_PASSWORD\", partner_id=\"MY_PARTNER_ID\")\n</code></pre>"},{"location":"#examples","title":"Examples","text":""},{"location":"#get-your-user-information","title":"Get your user information","text":"<pre><code>client = Client(username=\"MY_USERNAME\", password=\"MY_PASSWORD\", partner_id=\"MY_PARTNER_ID\")\nuser = client.get_user()\nprint(user)\n</code></pre>"},{"location":"#transfer-all-coins-from-the-miner","title":"Transfer all coins from the miner","text":"<pre><code>miner = client.get_miner()\nminer.transfer_coins()\n</code></pre>"},{"location":"#miner-upgrade","title":"Miner Upgrade","text":"<p>Check how many hours it takes before amortization of the next miner upgrade:</p> <pre><code>miner = client.get_miner()\nminer.next_level_amortization_hours\n</code></pre> <p>Upgrade the miner if amortization is less then 7 days:</p> <pre><code>if miner.next_level_amortization_hours &lt; 24 * 7:\n    miner.upgrade()\n</code></pre>"},{"location":"api_docs/bond/","title":"Bond","text":""},{"location":"api_docs/bond/#alpha_trader.bonds.Bond","title":"<code>Bond</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Bond security.</p> <p>Attributes:</p> Name Type Description <code>face_value</code> <code>float</code> <p>Face value of the bond.</p> <code>id</code> <code>str</code> <p>ID of the bond.</p> <code>interest_rate</code> <code>float</code> <p>Interest rate of the bond.</p> <code>issue_date</code> <code>int</code> <p>Issue date of the bond.</p> <code>issuer</code> <code>Issuer</code> <p>Issuer of the bond.</p> <code>listing</code> <code>Listing</code> <p>Listing of the bond.</p> <code>maturity_date</code> <code>int</code> <p>Maturity date of the bond.</p> <code>name</code> <code>str</code> <p>Name of the bond.</p> <code>price_spread</code> <code>Union[PriceSpread]</code> <p>Price spread of the bond.</p> <code>repurchase_listing</code> <code>Listing</code> <p>Repurchase listing of the bond.</p> <code>version</code> <code>int</code> <p>Version of the bond.</p> <code>volume</code> <code>float</code> <p>Volume</p> <code>client</code> <code>Client</code> <p>Client for interacting with the API.</p> Source code in <code>alpha_trader/bonds/__init__.py</code> <pre><code>class Bond(BaseModel):\n    \"\"\"\n        Bond security.\n\n        Attributes:\n            face_value: Face value of the bond.\n            id: ID of the bond.\n            interest_rate: Interest rate of the bond.\n            issue_date: Issue date of the bond.\n            issuer: Issuer of the bond.\n            listing: Listing of the bond.\n            maturity_date: Maturity date of the bond.\n            name: Name of the bond.\n            price_spread: Price spread of the bond.\n            repurchase_listing: Repurchase listing of the bond.\n            version: Version of the bond.\n            volume: Volume\n            client: Client for interacting with the API.\n    \"\"\"\n    face_value: float\n    id: str\n    interest_rate: float\n    issue_date: int\n    issuer: Issuer\n    listing: Listing\n    maturity_date: int\n    name: str\n    price_spread: Union[PriceSpread]\n    repurchase_listing: Listing\n    version: int\n    volume: float\n    client: Client\n\n    @staticmethod\n    def initialize_from_api_response(api_response: Dict, client: Client, price_spread: PriceSpread = None):\n        from alpha_trader.listing import Listing\n        from alpha_trader.price.price_spread import PriceSpread\n\n        if api_response[\"priceSpread\"] is not None:\n            price_spread = PriceSpread.initialize_from_api_response(api_response[\"priceSpread\"], client)\n\n        return Bond(\n            face_value=api_response[\"faceValue\"],\n            id=api_response[\"id\"],\n            interest_rate=api_response[\"interestRate\"],\n            issue_date=api_response[\"issueDate\"],\n            issuer=Issuer.initialize_from_api_response(api_response[\"issuer\"], client=client),\n            listing=Listing.initialize_from_api_response(api_response[\"listing\"], client),\n            maturity_date=api_response[\"maturityDate\"],\n            name=api_response[\"name\"],\n            price_spread=price_spread,\n            repurchase_listing=Listing.initialize_from_api_response(api_response[\"repurchaseListing\"], client),\n            version=api_response[\"version\"],\n            volume=api_response[\"volume\"],\n            client=client\n        )\n\n    @staticmethod\n    def issue(\n        company_id: str,\n        face_value: float,\n        interest_rate: float,\n        maturity_date: int,\n        number_of_bonds: int,\n        client: Client\n    ) -&gt; \"Bond\":\n        \"\"\"\n            Issue new bonds\n        Args:\n            client: API Client\n            company_id: ID of the company\n            face_value: face value of the bond\n            interest_rate: interest rate\n            maturity_date: maturity date\n            number_of_bonds: quantity of bonds to issue\n\n        Returns:\n            Bond\n        \"\"\"\n        data = {\n            \"companyId\": company_id,\n            \"faceValue\": face_value,\n            \"interestRate\": interest_rate,\n            \"maturityDate\": maturity_date,\n            \"numberOfBonds\": number_of_bonds\n        }\n        response = client.request(\"POST\", \"api/bonds\", data=data)\n        print(response.text)\n\n        return Bond.initialize_from_api_response(response.json(), client)\n\n    def __str__(self):\n        return f\"Bond(name={self.name}, volume={self.volume}, price_spread={self.price_spread}) \"\n\n    def __repr__(self):\n        return self.__str__()\n\n    @property\n    def remaining_time(self) -&gt; float:\n        \"\"\"\n            Calculate remaining time\n        Returns:\n            remaining time\n        \"\"\"\n        return self.listing.end_date - time.time() * 1000\n\n    @property\n    def effective_interest_rate(self) -&gt; float:\n        \"\"\"\n            Calculate effective interest rate\n        Returns:\n            effective interest rate\n        \"\"\"\n        remaining_days = self.remaining_time / 60 / 60 / 24 / 1000\n        effective_interest_rate = (100 - self.price_spread.ask_price + self.interest_rate) / remaining_days\n\n        return effective_interest_rate\n</code></pre>"},{"location":"api_docs/bond/#alpha_trader.bonds.Bond.effective_interest_rate","title":"<code>effective_interest_rate: float</code>  <code>property</code>","text":"<pre><code>Calculate effective interest rate\n</code></pre> <p>Returns:     effective interest rate</p>"},{"location":"api_docs/bond/#alpha_trader.bonds.Bond.remaining_time","title":"<code>remaining_time: float</code>  <code>property</code>","text":"<pre><code>Calculate remaining time\n</code></pre> <p>Returns:     remaining time</p>"},{"location":"api_docs/bond/#alpha_trader.bonds.Bond.issue","title":"<code>issue(company_id, face_value, interest_rate, maturity_date, number_of_bonds, client)</code>  <code>staticmethod</code>","text":"<pre><code>Issue new bonds\n</code></pre> <p>Args:     client: API Client     company_id: ID of the company     face_value: face value of the bond     interest_rate: interest rate     maturity_date: maturity date     number_of_bonds: quantity of bonds to issue</p> <p>Returns:</p> Type Description <code>'Bond'</code> <p>Bond</p> Source code in <code>alpha_trader/bonds/__init__.py</code> <pre><code>@staticmethod\ndef issue(\n    company_id: str,\n    face_value: float,\n    interest_rate: float,\n    maturity_date: int,\n    number_of_bonds: int,\n    client: Client\n) -&gt; \"Bond\":\n    \"\"\"\n        Issue new bonds\n    Args:\n        client: API Client\n        company_id: ID of the company\n        face_value: face value of the bond\n        interest_rate: interest rate\n        maturity_date: maturity date\n        number_of_bonds: quantity of bonds to issue\n\n    Returns:\n        Bond\n    \"\"\"\n    data = {\n        \"companyId\": company_id,\n        \"faceValue\": face_value,\n        \"interestRate\": interest_rate,\n        \"maturityDate\": maturity_date,\n        \"numberOfBonds\": number_of_bonds\n    }\n    response = client.request(\"POST\", \"api/bonds\", data=data)\n    print(response.text)\n\n    return Bond.initialize_from_api_response(response.json(), client)\n</code></pre>"},{"location":"api_docs/client/","title":"Client","text":"<p>Note</p> <p>To use the client, which is needed for all communication with the API, you need a user account and a partner id. You can request a partner id by contacting KM in the Alpha-Trader user interface.</p>"},{"location":"api_docs/client/#alpha_trader.client.Client","title":"<code>Client</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Client for interacting with the Alpha Trader API.</p> Example <p>Authenticate and get a personal token:</p> <pre><code>    &gt;&gt;&gt; from alpha_trader.client import Client\n    &gt;&gt;&gt; client = Client(\n    ...     base_url=\"https://stable.alpha-trader.com\",\n    ...     username=\"YOUR_USERNAME\",\n    ...     password=\"YOUR_PASSWORD\",\n    ...     partner_id=\"YOUR_PARTNER_ID\")\n    &gt;&gt;&gt; client.login()\n    2023-04-29 09:34:54,872 - alpha_trader.logging - INFO - Client successfully authenticated.\n    &gt;&gt;&gt; client.authenticated\n    True\n</code></pre> <pre><code>from alpha_trader.client import Client\n</code></pre> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>class Client(BaseModel):\n    \"\"\"\n    Client for interacting with the Alpha Trader API.\n\n    Example:\n        Authenticate and get a personal token:\n\n        ```python\n\n            &gt;&gt;&gt; from alpha_trader.client import Client\n            &gt;&gt;&gt; client = Client(\n            ...     base_url=\"https://stable.alpha-trader.com\",\n            ...     username=\"YOUR_USERNAME\",\n            ...     password=\"YOUR_PASSWORD\",\n            ...     partner_id=\"YOUR_PARTNER_ID\")\n            &gt;&gt;&gt; client.login()\n            2023-04-29 09:34:54,872 - alpha_trader.logging - INFO - Client successfully authenticated.\n            &gt;&gt;&gt; client.authenticated\n            True\n        ```\n\n        ```python\n        from alpha_trader.client import Client\n\n        ```\n\n    \"\"\"\n\n    base_url: str\n    username: str\n    password: str\n    partner_id: str\n    token: Union[str, None] = None\n    authenticated: bool = False\n\n    def login(self) -&gt; str:\n        \"\"\"\n        Login to the API and get a token.\n\n        Returns:\n            Token string\n        \"\"\"\n        url = os.path.join(self.base_url, \"user/token/\")\n\n        payload = {\n            \"username\": self.username,\n            \"password\": self.password,\n            \"partnerId\": self.partner_id,\n        }\n\n        response = requests.request(\"POST\", url, data=payload)\n\n        self.token = response.json()[\"message\"]\n        self.authenticated = True\n\n        logger.info(\"Client successfully authenticated.\")\n\n        return self.token\n\n    def __get_headers(self):\n        \"\"\"\"\"\"\n        headers = {\"Authorization\": f\"Bearer {self.token}\"}\n\n        return headers\n\n    def request(\n            self, method: str, endpoint: str, data: Dict = None, json: Dict = None, additional_headers: Dict = None, params: Dict = None\n    ) -&gt; requests.Response:\n        \"\"\"Make a request using the authenticated client. This method is mainly used internally by other classes\n        to retrieve more information from the API.\n\n        Example:\n            ```python\n            &gt;&gt;&gt; response = client.request(\"GET\", \"api/user\")\n            &gt;&gt;&gt; user_information = response.json()\n            &gt;&gt;&gt; user_information[\"username\"]\n            Malte\n\n        Args:\n            body: body parameters\n            additional_headers: Additional headers to be added to the request\n            method: HTTP method\n            endpoint: Endpoint\n            data: Data\n\n        Returns:\n            HTTP Response\n        \"\"\"\n\n        url = os.path.join(self.base_url, endpoint)\n\n        if not self.authenticated:\n            raise Exception(\"Client is not authenticated.\")\n\n        if additional_headers is None:\n            headers = self.__get_headers()\n        else:\n            headers = self.__get_headers() | additional_headers\n\n        response = requests.request(\n            method, url, data=data, headers=headers, params=params, json=json\n        )\n\n        return response\n\n    def get_user(self) -&gt; User:\n        \"\"\"Get the user information for the authenticated user.\n        Example:\n            ```python\n            &gt;&gt;&gt; user = client.get_user()\n            &gt;&gt;&gt; user.username\n            'Malte'\n            &gt;&gt;&gt; user.companies\n            [Company(name=Argo, security_identifier=STAD9A0F12), Company(name=Argo2, security_identifier=STA8D0230B)]\n            &gt;&gt;&gt; user.securities_accounts\n            SecuritiesAccount(id=7b3f6182-be88-4b98-aa75-4c2fd10487ae)\n            ```\n\n        Returns:\n            User\n        \"\"\"\n        from alpha_trader.user import User\n\n        response = self.request(\"GET\", \"api/user\")\n\n        return User.initialize_from_api_response(response.json(), self)\n\n    def get_miner(self) -&gt; Miner:\n        \"\"\"Get the miner information for the authenticated user.\n        :return: Miner\n        \"\"\"\n        from alpha_trader.miner import Miner\n\n        url = os.path.join(self.base_url, \"api/v2/my/miner\")\n\n        response = requests.get(url, headers=self.__get_headers())\n\n        return Miner.from_api_response(response.json(), client=self)\n\n    def get_listing(self, security_identifier: str) -&gt; Listing:\n        \"\"\"Get the listing information for a security.\n        :param security_identifier: Security identifier\n        :return: Listing\n        \"\"\"\n        from alpha_trader.listing import Listing\n\n        response = self.request(\"GET\", f\"api/listings/{security_identifier}\")\n\n        return Listing.initialize_from_api_response(response.json(), client=self)\n\n    def get_price_spread(self, security_identifier: str) -&gt; PriceSpread:\n        \"\"\"Get the price spread for a security.\n        :param security_identifier: Security identifier\n        :return: Price spread\n        \"\"\"\n        from alpha_trader.price.price_spread import PriceSpread\n\n        response = self.request(\"GET\", f\"api/pricespreads/{security_identifier}\")\n\n        return PriceSpread.initialize_from_api_response(response.json(), client=self)\n\n    def get_securities_account(self, securities_account_id: str) -&gt; SecuritiesAccount:\n        \"\"\"Get the securities account for a given ID.\n        :param securities_account_id: Securities account ID\n        :return: Securities account\n        \"\"\"\n        from alpha_trader.securities_account import SecuritiesAccount\n\n        response = self.request(\n            \"GET\", f\"api/v2/securitiesaccountdetails/{securities_account_id}\"\n        )\n\n        return SecuritiesAccount.initialize_from_api_response(\n            response.json(), client=self\n        )\n\n    def filter_listings(self, filter_id: str = None, filter_definition: Dict = None) -&gt; List[PriceSpread]:\n        \"\"\"\n\n        Returns:\n            Price Spreads\n\n        \"\"\"\n        from alpha_trader.price.price_spread import PriceSpread\n\n        if filter_definition is None:\n            filter_definition = {}\n\n        if filter_id is None:\n            params = None\n        else:\n            params = {\"filterId\": filter_id}\n\n        response = self.request(\n            \"POST\",\n            \"api/v2/filter/pricespreads\",\n            json=filter_definition,\n            additional_headers={\"Content-Type\": \"application/json\"},\n            params=params\n        )\n\n        return [\n            PriceSpread.initialize_from_filter_api_response(item, client=self) for item in response.json()[\"results\"]\n        ]\n\n    def get_bond(self, security_identifier: str, price_spread: Union[PriceSpread, None] = None) -&gt; Bond:\n        \"\"\"\n            Get the bond information for a security.\n\n        Args:\n            price_spread: manually set the price spread\n            security_identifier: Security identifier\n\n        Returns:\n            Bond\n        \"\"\"\n        from alpha_trader.bonds import Bond\n\n        response = self.request(\"GET\", f\"api/bonds/securityidentifier/{security_identifier}\")\n\n        Bond.update_forward_refs()\n\n        return Bond.initialize_from_api_response(response.json(), client=self, price_spread=price_spread)\n\n    def get_company(self, security_identifier: str) -&gt; Company:\n        \"\"\"\n            Get the company information for a security.\n\n        Args:\n            security_identifier: Security identifier\n\n        Returns:\n            Company\n        \"\"\"\n        from alpha_trader.company import Company\n\n        response = self.request(\"GET\", f\"api/companies/securityIdentifier/{security_identifier}\")\n\n        return Company.initialize_from_api_response(response.json(), client=self)\n\n    def get_order(self, order_id: str) -&gt; Order:\n        \"\"\"\n            Get the order information for a given order ID.\n\n        Args:\n            order_id: Order ID\n\n        Returns:\n            Order\n        \"\"\"\n        from alpha_trader.order import Order\n\n        response = self.request(\"GET\", f\"api/securityorders//{order_id}\")\n\n        return Order.initialize_from_api_response(response.json(), client=self)\n\n    def get_bonds(self, page: int, search: str, page_size: int):\n        pass\n\n    def register_user(self, username: str, password: str, email: str, locale: str = None) -&gt; User:\n        \"\"\"\n            Register a new user\n        Args:\n            username: Username\n            password: Password\n            email: Email\n            locale: Locale\n\n        Returns:\n            User\n        \"\"\"\n        from alpha_trader.user import User\n\n        data = {\n            \"username\": username,\n            \"password\": password,\n            \"emailAddress\": email,\n            \"locale\": locale,\n        }\n\n        response = requests.post(f\"{self.base_url}/user/register\", data=data)\n        if response.status_code != 201:\n            raise Exception(response.text)\n\n        self.login()\n\n        return User.initialize_from_api_response(response.json(), self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.__get_headers","title":"<code>__get_headers()</code>","text":"Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def __get_headers(self):\n    \"\"\"\"\"\"\n    headers = {\"Authorization\": f\"Bearer {self.token}\"}\n\n    return headers\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.filter_listings","title":"<code>filter_listings(filter_id=None, filter_definition=None)</code>","text":"<p>Returns:</p> Type Description <code>List[PriceSpread]</code> <p>Price Spreads</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def filter_listings(self, filter_id: str = None, filter_definition: Dict = None) -&gt; List[PriceSpread]:\n    \"\"\"\n\n    Returns:\n        Price Spreads\n\n    \"\"\"\n    from alpha_trader.price.price_spread import PriceSpread\n\n    if filter_definition is None:\n        filter_definition = {}\n\n    if filter_id is None:\n        params = None\n    else:\n        params = {\"filterId\": filter_id}\n\n    response = self.request(\n        \"POST\",\n        \"api/v2/filter/pricespreads\",\n        json=filter_definition,\n        additional_headers={\"Content-Type\": \"application/json\"},\n        params=params\n    )\n\n    return [\n        PriceSpread.initialize_from_filter_api_response(item, client=self) for item in response.json()[\"results\"]\n    ]\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_bond","title":"<code>get_bond(security_identifier, price_spread=None)</code>","text":"<pre><code>Get the bond information for a security.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>price_spread</code> <code>Union[PriceSpread, None]</code> <p>manually set the price spread</p> <code>None</code> <code>security_identifier</code> <code>str</code> <p>Security identifier</p> required <p>Returns:</p> Type Description <code>Bond</code> <p>Bond</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_bond(self, security_identifier: str, price_spread: Union[PriceSpread, None] = None) -&gt; Bond:\n    \"\"\"\n        Get the bond information for a security.\n\n    Args:\n        price_spread: manually set the price spread\n        security_identifier: Security identifier\n\n    Returns:\n        Bond\n    \"\"\"\n    from alpha_trader.bonds import Bond\n\n    response = self.request(\"GET\", f\"api/bonds/securityidentifier/{security_identifier}\")\n\n    Bond.update_forward_refs()\n\n    return Bond.initialize_from_api_response(response.json(), client=self, price_spread=price_spread)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_company","title":"<code>get_company(security_identifier)</code>","text":"<pre><code>Get the company information for a security.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>security_identifier</code> <code>str</code> <p>Security identifier</p> required <p>Returns:</p> Type Description <code>Company</code> <p>Company</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_company(self, security_identifier: str) -&gt; Company:\n    \"\"\"\n        Get the company information for a security.\n\n    Args:\n        security_identifier: Security identifier\n\n    Returns:\n        Company\n    \"\"\"\n    from alpha_trader.company import Company\n\n    response = self.request(\"GET\", f\"api/companies/securityIdentifier/{security_identifier}\")\n\n    return Company.initialize_from_api_response(response.json(), client=self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_listing","title":"<code>get_listing(security_identifier)</code>","text":"<p>Get the listing information for a security. :param security_identifier: Security identifier :return: Listing</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_listing(self, security_identifier: str) -&gt; Listing:\n    \"\"\"Get the listing information for a security.\n    :param security_identifier: Security identifier\n    :return: Listing\n    \"\"\"\n    from alpha_trader.listing import Listing\n\n    response = self.request(\"GET\", f\"api/listings/{security_identifier}\")\n\n    return Listing.initialize_from_api_response(response.json(), client=self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_miner","title":"<code>get_miner()</code>","text":"<p>Get the miner information for the authenticated user. :return: Miner</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_miner(self) -&gt; Miner:\n    \"\"\"Get the miner information for the authenticated user.\n    :return: Miner\n    \"\"\"\n    from alpha_trader.miner import Miner\n\n    url = os.path.join(self.base_url, \"api/v2/my/miner\")\n\n    response = requests.get(url, headers=self.__get_headers())\n\n    return Miner.from_api_response(response.json(), client=self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_order","title":"<code>get_order(order_id)</code>","text":"<pre><code>Get the order information for a given order ID.\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>order_id</code> <code>str</code> <p>Order ID</p> required <p>Returns:</p> Type Description <code>Order</code> <p>Order</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_order(self, order_id: str) -&gt; Order:\n    \"\"\"\n        Get the order information for a given order ID.\n\n    Args:\n        order_id: Order ID\n\n    Returns:\n        Order\n    \"\"\"\n    from alpha_trader.order import Order\n\n    response = self.request(\"GET\", f\"api/securityorders//{order_id}\")\n\n    return Order.initialize_from_api_response(response.json(), client=self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_price_spread","title":"<code>get_price_spread(security_identifier)</code>","text":"<p>Get the price spread for a security. :param security_identifier: Security identifier :return: Price spread</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_price_spread(self, security_identifier: str) -&gt; PriceSpread:\n    \"\"\"Get the price spread for a security.\n    :param security_identifier: Security identifier\n    :return: Price spread\n    \"\"\"\n    from alpha_trader.price.price_spread import PriceSpread\n\n    response = self.request(\"GET\", f\"api/pricespreads/{security_identifier}\")\n\n    return PriceSpread.initialize_from_api_response(response.json(), client=self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_securities_account","title":"<code>get_securities_account(securities_account_id)</code>","text":"<p>Get the securities account for a given ID. :param securities_account_id: Securities account ID :return: Securities account</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_securities_account(self, securities_account_id: str) -&gt; SecuritiesAccount:\n    \"\"\"Get the securities account for a given ID.\n    :param securities_account_id: Securities account ID\n    :return: Securities account\n    \"\"\"\n    from alpha_trader.securities_account import SecuritiesAccount\n\n    response = self.request(\n        \"GET\", f\"api/v2/securitiesaccountdetails/{securities_account_id}\"\n    )\n\n    return SecuritiesAccount.initialize_from_api_response(\n        response.json(), client=self\n    )\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.get_user","title":"<code>get_user()</code>","text":"<p>Get the user information for the authenticated user. Example:     <pre><code>&gt;&gt;&gt; user = client.get_user()\n&gt;&gt;&gt; user.username\n'Malte'\n&gt;&gt;&gt; user.companies\n[Company(name=Argo, security_identifier=STAD9A0F12), Company(name=Argo2, security_identifier=STA8D0230B)]\n&gt;&gt;&gt; user.securities_accounts\nSecuritiesAccount(id=7b3f6182-be88-4b98-aa75-4c2fd10487ae)\n</code></pre></p> <p>Returns:</p> Type Description <code>User</code> <p>User</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def get_user(self) -&gt; User:\n    \"\"\"Get the user information for the authenticated user.\n    Example:\n        ```python\n        &gt;&gt;&gt; user = client.get_user()\n        &gt;&gt;&gt; user.username\n        'Malte'\n        &gt;&gt;&gt; user.companies\n        [Company(name=Argo, security_identifier=STAD9A0F12), Company(name=Argo2, security_identifier=STA8D0230B)]\n        &gt;&gt;&gt; user.securities_accounts\n        SecuritiesAccount(id=7b3f6182-be88-4b98-aa75-4c2fd10487ae)\n        ```\n\n    Returns:\n        User\n    \"\"\"\n    from alpha_trader.user import User\n\n    response = self.request(\"GET\", \"api/user\")\n\n    return User.initialize_from_api_response(response.json(), self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.login","title":"<code>login()</code>","text":"<p>Login to the API and get a token.</p> <p>Returns:</p> Type Description <code>str</code> <p>Token string</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def login(self) -&gt; str:\n    \"\"\"\n    Login to the API and get a token.\n\n    Returns:\n        Token string\n    \"\"\"\n    url = os.path.join(self.base_url, \"user/token/\")\n\n    payload = {\n        \"username\": self.username,\n        \"password\": self.password,\n        \"partnerId\": self.partner_id,\n    }\n\n    response = requests.request(\"POST\", url, data=payload)\n\n    self.token = response.json()[\"message\"]\n    self.authenticated = True\n\n    logger.info(\"Client successfully authenticated.\")\n\n    return self.token\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.register_user","title":"<code>register_user(username, password, email, locale=None)</code>","text":"<pre><code>Register a new user\n</code></pre> <p>Args:     username: Username     password: Password     email: Email     locale: Locale</p> <p>Returns:</p> Type Description <code>User</code> <p>User</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def register_user(self, username: str, password: str, email: str, locale: str = None) -&gt; User:\n    \"\"\"\n        Register a new user\n    Args:\n        username: Username\n        password: Password\n        email: Email\n        locale: Locale\n\n    Returns:\n        User\n    \"\"\"\n    from alpha_trader.user import User\n\n    data = {\n        \"username\": username,\n        \"password\": password,\n        \"emailAddress\": email,\n        \"locale\": locale,\n    }\n\n    response = requests.post(f\"{self.base_url}/user/register\", data=data)\n    if response.status_code != 201:\n        raise Exception(response.text)\n\n    self.login()\n\n    return User.initialize_from_api_response(response.json(), self)\n</code></pre>"},{"location":"api_docs/client/#alpha_trader.client.Client.request","title":"<code>request(method, endpoint, data=None, json=None, additional_headers=None, params=None)</code>","text":"<p>Make a request using the authenticated client. This method is mainly used internally by other classes to retrieve more information from the API.</p> Example <p>```python</p> <p>response = client.request(\"GET\", \"api/user\") user_information = response.json() user_information[\"username\"] Malte</p> <p>Parameters:</p> Name Type Description Default <code>body</code> <p>body parameters</p> required <code>additional_headers</code> <code>Dict</code> <p>Additional headers to be added to the request</p> <code>None</code> <code>method</code> <code>str</code> <p>HTTP method</p> required <code>endpoint</code> <code>str</code> <p>Endpoint</p> required <code>data</code> <code>Dict</code> <p>Data</p> <code>None</code> <p>Returns:</p> Type Description <code>Response</code> <p>HTTP Response</p> Source code in <code>alpha_trader/client/__init__.py</code> <pre><code>def request(\n        self, method: str, endpoint: str, data: Dict = None, json: Dict = None, additional_headers: Dict = None, params: Dict = None\n) -&gt; requests.Response:\n    \"\"\"Make a request using the authenticated client. This method is mainly used internally by other classes\n    to retrieve more information from the API.\n\n    Example:\n        ```python\n        &gt;&gt;&gt; response = client.request(\"GET\", \"api/user\")\n        &gt;&gt;&gt; user_information = response.json()\n        &gt;&gt;&gt; user_information[\"username\"]\n        Malte\n\n    Args:\n        body: body parameters\n        additional_headers: Additional headers to be added to the request\n        method: HTTP method\n        endpoint: Endpoint\n        data: Data\n\n    Returns:\n        HTTP Response\n    \"\"\"\n\n    url = os.path.join(self.base_url, endpoint)\n\n    if not self.authenticated:\n        raise Exception(\"Client is not authenticated.\")\n\n    if additional_headers is None:\n        headers = self.__get_headers()\n    else:\n        headers = self.__get_headers() | additional_headers\n\n    response = requests.request(\n        method, url, data=data, headers=headers, params=params, json=json\n    )\n\n    return response\n</code></pre>"},{"location":"api_docs/miner/","title":"Miner","text":""},{"location":"api_docs/miner/#alpha_trader.miner.Miner","title":"<code>Miner</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Miner model</p> <p>Attributes:</p> Name Type Description <code>coins_per_hour</code> <code>float</code> <p>Number of coins that are mined per hour</p> <code>id</code> <code>str</code> <p>ID of the miner</p> <code>maximum_capacity</code> <code>float</code> <p>Maximum capacity of the miner, before transfer is needed</p> <code>next_level_coins_per_hour</code> <code>float</code> <p>Coins per hour of the miner on the next level</p> <code>next_level_costs</code> <code>float</code> <p>Costs of the next level of the miner</p> <code>owner</code> <code>Owner</code> <p>Owner of the miner</p> <code>storage</code> <code>float</code> <p>Storage of the miner</p> <code>transferable_coins</code> <code>int</code> <p>Transferable coins of the miner</p> <code>version</code> <code>int</code> <p>Version of the miner</p> <code>client</code> <code>Client</code> <p>Client of the miner (for interaction with the API)</p> Source code in <code>alpha_trader/miner/__init__.py</code> <pre><code>class Miner(BaseModel):\n    \"\"\"\n    Miner model\n\n    Attributes:\n        coins_per_hour: Number of coins that are mined per hour\n        id: ID of the miner\n        maximum_capacity: Maximum capacity of the miner, before transfer is needed\n        next_level_coins_per_hour: Coins per hour of the miner on the next level\n        next_level_costs: Costs of the next level of the miner\n        owner: Owner of the miner\n        storage: Storage of the miner\n        transferable_coins: Transferable coins of the miner\n        version: Version of the miner\n        client: Client of the miner (for interaction with the API)\n    \"\"\"\n\n    coins_per_hour: float\n    id: str\n    maximum_capacity: float\n    next_level_coins_per_hour: float\n    next_level_costs: float\n    owner: Owner\n    storage: float\n    transferable_coins: int\n    version: int\n    client: Client\n\n    @staticmethod\n    def from_api_response(api_response: Dict, client: Client):\n        return Miner(\n            coins_per_hour=api_response[\"coinsPerHour\"],\n            id=api_response[\"id\"],\n            maximum_capacity=api_response[\"maximumCapacity\"],\n            next_level_coins_per_hour=api_response[\"nextLevelCoinsPerHour\"],\n            next_level_costs=api_response[\"nextLevelCosts\"],\n            owner=Owner.from_api_response(api_response[\"owner\"]),\n            storage=api_response[\"storage\"],\n            transferable_coins=api_response[\"transferableCoins\"],\n            version=api_response[\"version\"],\n            client=client,\n        )\n\n    def update_from_api_response(self, api_response: Dict):\n        \"\"\"\n        Update the miner's attributes from the API response.\n\n        Args:\n            api_response (Dict): The API response containing the updated miner attributes.\n        \"\"\"\n        self.coins_per_hour = api_response[\"coinsPerHour\"]\n        self.id = api_response[\"id\"]\n        self.maximum_capacity = api_response[\"maximumCapacity\"]\n        self.next_level_coins_per_hour = api_response[\"nextLevelCoinsPerHour\"]\n        self.next_level_costs = api_response[\"nextLevelCosts\"]\n        self.owner = Owner.from_api_response(api_response[\"owner\"])\n        self.storage = api_response[\"storage\"]\n        self.transferable_coins = api_response[\"transferableCoins\"]\n        self.version = api_response[\"version\"]\n\n    def transfer_coins(self):\n        \"\"\"\n            Transfer coins from the miner to the clearing account\n        Returns:\n            API response\n        \"\"\"\n        response = self.client.request(\"PUT\", \"api/v2/my/cointransfer\")\n        self.update_from_api_response(response.json())\n\n        logger.info(\n            f\"Coins transferred. New transferable coins: {self.transferable_coins}\"\n        )\n\n        return response.json()\n\n    def upgrade(self) -&gt; Dict:\n        \"\"\"\n            Upgrade the miner to the next level.\n        Returns:\n            API response\n        \"\"\"\n        response = self.client.request(\"PUT\", \"api/v2/my/minerupgrade\")\n        if response.status_code &gt; 205:\n            logger.warning(f\"Miner upgrade failed: {response.text}\")\n            return response.json()\n\n        self.update_from_api_response(response.json())\n\n        logger.info(f\"Miner upgraded. New coins per hour: {self.coins_per_hour}\")\n        logger.info(f\"Next level costs: {self.next_level_costs}\")\n        logger.info(f\"Next level coins per hour: {self.next_level_coins_per_hour}\")\n\n        return response.json()\n\n    def __get_coin_bid_price(self):\n        \"\"\"\n            Get the coin bid price.\n        Returns:\n            Coin bid price\n        \"\"\"\n        return self.client.get_price_spread(\"ACALPHCOIN\").bid_price\n\n    @property\n    def next_level_amortization_hours(self) -&gt; float:\n        \"\"\"\n            Number of hours until the next level of the miner is amortized.\n        Returns:\n            Number of hours until the next level of the miner is amortized\n        \"\"\"\n        coin_bid_price = self.__get_coin_bid_price()\n        additional_earnings_per_hour = (\n            self.next_level_coins_per_hour - self.coins_per_hour\n        ) * coin_bid_price\n\n        next_level_amortization_hours = (\n            self.next_level_costs // additional_earnings_per_hour\n        )\n\n        logger.info(\n            f\"\"\"Next level amortization hours: {\n            next_level_amortization_hours\n        } (or {\n            next_level_amortization_hours / 24\n        } days)\"\"\"\n        )\n\n        return next_level_amortization_hours\n</code></pre>"},{"location":"api_docs/miner/#alpha_trader.miner.Miner.next_level_amortization_hours","title":"<code>next_level_amortization_hours: float</code>  <code>property</code>","text":"<pre><code>Number of hours until the next level of the miner is amortized.\n</code></pre> <p>Returns:     Number of hours until the next level of the miner is amortized</p>"},{"location":"api_docs/miner/#alpha_trader.miner.Miner.__get_coin_bid_price","title":"<code>__get_coin_bid_price()</code>","text":"<pre><code>Get the coin bid price.\n</code></pre> <p>Returns:     Coin bid price</p> Source code in <code>alpha_trader/miner/__init__.py</code> <pre><code>def __get_coin_bid_price(self):\n    \"\"\"\n        Get the coin bid price.\n    Returns:\n        Coin bid price\n    \"\"\"\n    return self.client.get_price_spread(\"ACALPHCOIN\").bid_price\n</code></pre>"},{"location":"api_docs/miner/#alpha_trader.miner.Miner.transfer_coins","title":"<code>transfer_coins()</code>","text":"<pre><code>Transfer coins from the miner to the clearing account\n</code></pre> <p>Returns:     API response</p> Source code in <code>alpha_trader/miner/__init__.py</code> <pre><code>def transfer_coins(self):\n    \"\"\"\n        Transfer coins from the miner to the clearing account\n    Returns:\n        API response\n    \"\"\"\n    response = self.client.request(\"PUT\", \"api/v2/my/cointransfer\")\n    self.update_from_api_response(response.json())\n\n    logger.info(\n        f\"Coins transferred. New transferable coins: {self.transferable_coins}\"\n    )\n\n    return response.json()\n</code></pre>"},{"location":"api_docs/miner/#alpha_trader.miner.Miner.update_from_api_response","title":"<code>update_from_api_response(api_response)</code>","text":"<p>Update the miner's attributes from the API response.</p> <p>Parameters:</p> Name Type Description Default <code>api_response</code> <code>Dict</code> <p>The API response containing the updated miner attributes.</p> required Source code in <code>alpha_trader/miner/__init__.py</code> <pre><code>def update_from_api_response(self, api_response: Dict):\n    \"\"\"\n    Update the miner's attributes from the API response.\n\n    Args:\n        api_response (Dict): The API response containing the updated miner attributes.\n    \"\"\"\n    self.coins_per_hour = api_response[\"coinsPerHour\"]\n    self.id = api_response[\"id\"]\n    self.maximum_capacity = api_response[\"maximumCapacity\"]\n    self.next_level_coins_per_hour = api_response[\"nextLevelCoinsPerHour\"]\n    self.next_level_costs = api_response[\"nextLevelCosts\"]\n    self.owner = Owner.from_api_response(api_response[\"owner\"])\n    self.storage = api_response[\"storage\"]\n    self.transferable_coins = api_response[\"transferableCoins\"]\n    self.version = api_response[\"version\"]\n</code></pre>"},{"location":"api_docs/miner/#alpha_trader.miner.Miner.upgrade","title":"<code>upgrade()</code>","text":"<pre><code>Upgrade the miner to the next level.\n</code></pre> <p>Returns:     API response</p> Source code in <code>alpha_trader/miner/__init__.py</code> <pre><code>def upgrade(self) -&gt; Dict:\n    \"\"\"\n        Upgrade the miner to the next level.\n    Returns:\n        API response\n    \"\"\"\n    response = self.client.request(\"PUT\", \"api/v2/my/minerupgrade\")\n    if response.status_code &gt; 205:\n        logger.warning(f\"Miner upgrade failed: {response.text}\")\n        return response.json()\n\n    self.update_from_api_response(response.json())\n\n    logger.info(f\"Miner upgraded. New coins per hour: {self.coins_per_hour}\")\n    logger.info(f\"Next level costs: {self.next_level_costs}\")\n    logger.info(f\"Next level coins per hour: {self.next_level_coins_per_hour}\")\n\n    return response.json()\n</code></pre>"},{"location":"api_docs/order/","title":"Order","text":""},{"location":"api_docs/order/#alpha_trader.order.Order","title":"<code>Order</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>alpha_trader/order/__init__.py</code> <pre><code>class Order(BaseModel):\n    action: str\n    check_result: Union[OrderCheckResult, None] = None\n    committed_cash: float\n    counter_party: Union[str, None] = None\n    counter_party_name: Union[str, None] = None\n    creation_date: int\n    execution_price: Union[float, None] = None\n    execution_volume: Union[float, None] = None\n    good_after_date: Union[int, None] = None\n    good_till_date: Union[int, None] = None\n    hourly_change: Union[int, None] = None\n    id: str\n    listing: Listing\n    next_hourly_change_date: Union[int, None] = None\n    number_of_shares: int\n    owner: str\n    owner_name: str\n    price: Union[float, None] = None\n    private_counter_party: Union[bool, None] = None\n    private_owner: bool\n    security_identifier: str\n    spread: Union[PriceSpread, None] = None\n    type: str\n    uncommitted_cash: Union[float, None] = None\n    uncommitted_shares: int\n    version: Union[int, None] = None\n    volume: Union[float, None] = None\n    client: Client\n\n    @staticmethod\n    def initialize_from_api_response(api_response: Dict, client: Client):\n        return Order(\n            action=api_response[\"action\"],\n            check_result=api_response[\"checkResult\"],\n            committed_cash=api_response[\"committedCash\"],\n            counter_party=api_response[\"counterParty\"],\n            counter_party_name=api_response[\"counterPartyName\"],\n            creation_date=api_response[\"creationDate\"],\n            execution_price=api_response[\"executionPrice\"],\n            execution_volume=api_response[\"executionVolume\"],\n            good_after_date=api_response[\"goodAfterDate\"],\n            good_till_date=api_response[\"goodTillDate\"],\n            hourly_change=api_response[\"hourlyChange\"],\n            id=api_response[\"id\"],\n            listing=Listing.initialize_from_api_response(\n                api_response[\"listing\"], client\n            ),\n            next_hourly_change_date=api_response[\"nextHourlyChangeDate\"],\n            number_of_shares=api_response[\"numberOfShares\"],\n            owner=api_response[\"owner\"],\n            owner_name=api_response[\"ownerName\"],\n            price=api_response[\"price\"],\n            private_counter_party=api_response[\"privateCounterParty\"],\n            private_owner=api_response[\"privateOwner\"],\n            security_identifier=api_response[\"securityIdentifier\"],\n            spread=PriceSpread.initialize_from_api_response(\n                api_response[\"spread\"], client\n            )\n            if type(api_response[\"spread\"]) == dict\n            else None,\n            type=api_response[\"type\"],\n            uncommitted_cash=api_response[\"uncommittedCash\"],\n            uncommitted_shares=api_response[\"uncommittedShares\"],\n            version=api_response[\"version\"],\n            client=client,\n        )\n\n    def delete(self):\n        response = self.client.request(\"DELETE\", f\"api/securityorders/{self.id}\")\n\n        return response.status_code == 200\n\n    @staticmethod\n    def create(\n        action: str,\n        quantity: int,\n        client: Client,\n        owner_securities_account_id: str,\n        security_identifier: str,\n        price: float = None,\n        good_after_date: int = None,\n        good_till_date: int = None,\n        order_type: str = \"LIMIT\",\n        counter_party: str = None,\n        hourly_change: float = None,\n        check_order_only: bool = False,\n    ) -&gt; \"Order\":\n        \"\"\"Creates a new order.\n\n        Args:\n            client: Alpha Trader Client\n            action: Security Order Action, either \"BUY\" or \"SELL\"\n            quantity:  Number of shares to buy or sell\n            price: Price\n            good_after_date: Valid from date (premium feature)\n            good_till_date: Valid until date (premium feature)\n            order_type: Security Order Type, either \"LIMIT\" or \"MARKET\"\n            counter_party: Securities Account ID of the counterparty\n            owner_securities_account_id: Securities Account ID of the owner\n            security_identifier: Security Identifier\n            hourly_change: Hourly change of the order\n            check_order_only: Only check the order, do not create it\n\n        Returns:\n            Order\n\n        \"\"\"\n        data = {\n            \"action\": action,\n            \"numberOfShares\": quantity,\n            \"price\": price,\n            \"goodAfterDate\": good_after_date,\n            \"goodTillDate\": good_till_date,\n            \"type\": order_type,\n            \"counterparty\": counter_party,\n            \"owner\": owner_securities_account_id,\n            \"securityIdentifier\": security_identifier,\n            \"checkOrderOnly\": check_order_only,\n            \"hourlyChange\": hourly_change,\n        }\n\n        response = client.request(\"POST\", \"api/securityorders\", data=data)\n        if response.status_code not in [200, 201]:\n            print(response.text)\n\n        return Order.initialize_from_api_response(response.json(), client)\n\n    def update(self):\n        response = self.client.request(\"GET\", f\"api/securityorders/{self.id}\")\n\n        return Order.initialize_from_api_response(response.json(), self.client)\n\n    def __str__(self):\n        return (\n            f\"{self.action} {self.number_of_shares} {self.listing.name} @ {self.price}\"\n        )\n\n    def __repr__(self):\n        return self.__str__()\n</code></pre>"},{"location":"api_docs/order/#alpha_trader.order.Order.create","title":"<code>create(action, quantity, client, owner_securities_account_id, security_identifier, price=None, good_after_date=None, good_till_date=None, order_type='LIMIT', counter_party=None, hourly_change=None, check_order_only=False)</code>  <code>staticmethod</code>","text":"<p>Creates a new order.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>Client</code> <p>Alpha Trader Client</p> required <code>action</code> <code>str</code> <p>Security Order Action, either \"BUY\" or \"SELL\"</p> required <code>quantity</code> <code>int</code> <p>Number of shares to buy or sell</p> required <code>price</code> <code>float</code> <p>Price</p> <code>None</code> <code>good_after_date</code> <code>int</code> <p>Valid from date (premium feature)</p> <code>None</code> <code>good_till_date</code> <code>int</code> <p>Valid until date (premium feature)</p> <code>None</code> <code>order_type</code> <code>str</code> <p>Security Order Type, either \"LIMIT\" or \"MARKET\"</p> <code>'LIMIT'</code> <code>counter_party</code> <code>str</code> <p>Securities Account ID of the counterparty</p> <code>None</code> <code>owner_securities_account_id</code> <code>str</code> <p>Securities Account ID of the owner</p> required <code>security_identifier</code> <code>str</code> <p>Security Identifier</p> required <code>hourly_change</code> <code>float</code> <p>Hourly change of the order</p> <code>None</code> <code>check_order_only</code> <code>bool</code> <p>Only check the order, do not create it</p> <code>False</code> <p>Returns:</p> Type Description <code>Order</code> <p>Order</p> Source code in <code>alpha_trader/order/__init__.py</code> <pre><code>@staticmethod\ndef create(\n    action: str,\n    quantity: int,\n    client: Client,\n    owner_securities_account_id: str,\n    security_identifier: str,\n    price: float = None,\n    good_after_date: int = None,\n    good_till_date: int = None,\n    order_type: str = \"LIMIT\",\n    counter_party: str = None,\n    hourly_change: float = None,\n    check_order_only: bool = False,\n) -&gt; \"Order\":\n    \"\"\"Creates a new order.\n\n    Args:\n        client: Alpha Trader Client\n        action: Security Order Action, either \"BUY\" or \"SELL\"\n        quantity:  Number of shares to buy or sell\n        price: Price\n        good_after_date: Valid from date (premium feature)\n        good_till_date: Valid until date (premium feature)\n        order_type: Security Order Type, either \"LIMIT\" or \"MARKET\"\n        counter_party: Securities Account ID of the counterparty\n        owner_securities_account_id: Securities Account ID of the owner\n        security_identifier: Security Identifier\n        hourly_change: Hourly change of the order\n        check_order_only: Only check the order, do not create it\n\n    Returns:\n        Order\n\n    \"\"\"\n    data = {\n        \"action\": action,\n        \"numberOfShares\": quantity,\n        \"price\": price,\n        \"goodAfterDate\": good_after_date,\n        \"goodTillDate\": good_till_date,\n        \"type\": order_type,\n        \"counterparty\": counter_party,\n        \"owner\": owner_securities_account_id,\n        \"securityIdentifier\": security_identifier,\n        \"checkOrderOnly\": check_order_only,\n        \"hourlyChange\": hourly_change,\n    }\n\n    response = client.request(\"POST\", \"api/securityorders\", data=data)\n    if response.status_code not in [200, 201]:\n        print(response.text)\n\n    return Order.initialize_from_api_response(response.json(), client)\n</code></pre>"},{"location":"api_docs/portfolio/","title":"Portfolio","text":""},{"location":"api_docs/portfolio/#alpha_trader.portfolio.Portfolio","title":"<code>Portfolio</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Portfolio model</p> <p>Attributes:</p> Name Type Description <code>cash</code> <code>float</code> <p>Cash of the portfolio</p> <code>committed_cash</code> <code>float</code> <p>Committed cash of the portfolio</p> <code>positions</code> <code>Union[List[Position], None]</code> <p>Positions of the portfolio</p> <code>securities_account_id</code> <code>str</code> <p>Securities account ID of the portfolio</p> <code>client</code> <code>Client</code> <p>Client of the portfolio (for interaction with the API)</p> Source code in <code>alpha_trader/portfolio/__init__.py</code> <pre><code>class Portfolio(BaseModel):\n    \"\"\"\n    Portfolio model\n\n    Attributes:\n        cash: Cash of the portfolio\n        committed_cash: Committed cash of the portfolio\n        positions: Positions of the portfolio\n        securities_account_id: Securities account ID of the portfolio\n        client: Client of the portfolio (for interaction with the API)\n    \"\"\"\n\n    cash: float\n    committed_cash: float\n    positions: Union[List[Position], None]\n    securities_account_id: str\n    client: Client\n\n    @staticmethod\n    def initialize_from_api_response(api_response: Dict, client: Client) -&gt; \"Portfolio\":\n        return Portfolio(\n            cash=api_response[\"cash\"],\n            committed_cash=api_response[\"committedCash\"],\n            positions=[\n                Position.initialize_from_api_response(res, client)\n                for res in api_response[\"positions\"]\n            ],\n            securities_account_id=api_response[\"securitiesAccountId\"],\n            client=client,\n        )\n\n    def __str__(self):\n        return f\"\"\"Portfolio(securities_account_id={self.securities_account_id}, cash={self.cash}, \\\n        committed_cash={self.committed_cash}, positions={self.positions})\"\"\"\n\n    def __repr__(self):\n        return self.__str__()\n\n    @property\n    def uncommitted_cash(self) -&gt; float:\n        \"\"\"\n            Uncommitted cash of the portfolio\n        Returns:\n            Uncommitted cash\n        \"\"\"\n        return self.cash - self.committed_cash\n</code></pre>"},{"location":"api_docs/portfolio/#alpha_trader.portfolio.Portfolio.uncommitted_cash","title":"<code>uncommitted_cash: float</code>  <code>property</code>","text":"<pre><code>Uncommitted cash of the portfolio\n</code></pre> <p>Returns:     Uncommitted cash</p>"},{"location":"api_docs/securities_account/","title":"Securities Account","text":"<p>The securities account is the account that holds the securities that the user or company.</p>"},{"location":"api_docs/securities_account/#alpha_trader.securities_account.SecuritiesAccount","title":"<code>SecuritiesAccount</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>The SecuritiesAccount model represents a securities account in the trading system.</p> <p>Attributes:</p> Name Type Description <code>clearing_account_id</code> <code>str</code> <p>The ID of the clearing account associated with this securities account.</p> <code>id</code> <code>str</code> <p>The unique ID of the securities account.</p> <code>private_account</code> <code>bool</code> <p>A flag indicating whether the securities account is private.</p> <code>version</code> <code>int</code> <p>The version of the securities account.</p> <code>client</code> <code>Client</code> <p>The client associated with the securities account, used for API interactions.</p> Source code in <code>alpha_trader/securities_account/__init__.py</code> <pre><code>class SecuritiesAccount(BaseModel):\n    \"\"\"\n    The SecuritiesAccount model represents a securities account in the trading system.\n\n    Attributes:\n        clearing_account_id (str): The ID of the clearing account associated with this securities account.\n        id (str): The unique ID of the securities account.\n        private_account (bool): A flag indicating whether the securities account is private.\n        version (int): The version of the securities account.\n        client (Client): The client associated with the securities account, used for API interactions.\n    \"\"\"\n\n    clearing_account_id: str\n    id: str\n    private_account: bool\n    version: int\n    client: Client\n\n    @staticmethod\n    def initialize_from_api_response(api_response: Dict, client: Client):\n        return SecuritiesAccount(\n            clearing_account_id=api_response[\"clearingAccountId\"],\n            id=api_response[\"id\"],\n            private_account=api_response[\"privateAccount\"],\n            version=api_response[\"version\"],\n            client=client,\n        )\n\n    def __str__(self):\n        return f\"SecuritiesAccount(id={self.id})\"\n\n    def __repr__(self):\n        return self.__str__()\n\n    @property\n    def portfolio(self) -&gt; Portfolio:\n        \"\"\"\n        Retrieve the portfolio of this securities account\n        Returns:\n            Portfolio: The portfolio associated with this securities account\n        \"\"\"\n        response = self.client.request(\"GET\", f\"api/portfolios/{self.id}\")\n\n        return Portfolio.initialize_from_api_response(response.json(), self.client)\n\n    @property\n    def orders(self) -&gt; List[Order]:\n        \"\"\"\n            Orders for this securities account\n        Returns:\n            List of orders\n        \"\"\"\n        response = self.client.request(\n            \"GET\", f\"api/securityorders/securitiesaccount/{self.id}\"\n        )\n\n        return [\n            Order.initialize_from_api_response(res, self.client)\n            for res in response.json()\n        ]\n\n    def delete_all_orders(self):\n        response = self.client.request(\"DELETE\", f\"api/securityorders\", params={\"owner\": self.id})\n\n        if response.status_code &gt; 205:\n            print(response.text)\n\n        return response.status_code\n\n    def order(\n        self,\n        action: str,\n        order_type: str,\n        quantity: int,\n        security_identifier: str,\n        price: float = None,\n        counter_party: str | None = None\n    ) -&gt; Order:\n        \"\"\"Create an order for this securities account\n\n        Args:\n            action: action of the order \"BUY\" or \"SELL\"\n            order_type: order type \"LIMIT\" or \"MARKET\"\n            price: price of the order\n            quantity: number of shares\n            security_identifier: security identifier of the order\n            counter_party: security account id of the counterparty\n\n        Returns:\n            Order\n        \"\"\"\n        return Order.create(\n            action=action,\n            order_type=order_type,\n            price=price,\n            quantity=quantity,\n            security_identifier=security_identifier,\n            client=self.client,\n            owner_securities_account_id=self.id,\n            counter_party=counter_party\n        )\n</code></pre>"},{"location":"api_docs/securities_account/#alpha_trader.securities_account.SecuritiesAccount.orders","title":"<code>orders: List[Order]</code>  <code>property</code>","text":"<pre><code>Orders for this securities account\n</code></pre> <p>Returns:     List of orders</p>"},{"location":"api_docs/securities_account/#alpha_trader.securities_account.SecuritiesAccount.portfolio","title":"<code>portfolio: Portfolio</code>  <code>property</code>","text":"<p>Retrieve the portfolio of this securities account Returns:     Portfolio: The portfolio associated with this securities account</p>"},{"location":"api_docs/securities_account/#alpha_trader.securities_account.SecuritiesAccount.order","title":"<code>order(action, order_type, quantity, security_identifier, price=None, counter_party=None)</code>","text":"<p>Create an order for this securities account</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>str</code> <p>action of the order \"BUY\" or \"SELL\"</p> required <code>order_type</code> <code>str</code> <p>order type \"LIMIT\" or \"MARKET\"</p> required <code>price</code> <code>float</code> <p>price of the order</p> <code>None</code> <code>quantity</code> <code>int</code> <p>number of shares</p> required <code>security_identifier</code> <code>str</code> <p>security identifier of the order</p> required <code>counter_party</code> <code>str | None</code> <p>security account id of the counterparty</p> <code>None</code> <p>Returns:</p> Type Description <code>Order</code> <p>Order</p> Source code in <code>alpha_trader/securities_account/__init__.py</code> <pre><code>def order(\n    self,\n    action: str,\n    order_type: str,\n    quantity: int,\n    security_identifier: str,\n    price: float = None,\n    counter_party: str | None = None\n) -&gt; Order:\n    \"\"\"Create an order for this securities account\n\n    Args:\n        action: action of the order \"BUY\" or \"SELL\"\n        order_type: order type \"LIMIT\" or \"MARKET\"\n        price: price of the order\n        quantity: number of shares\n        security_identifier: security identifier of the order\n        counter_party: security account id of the counterparty\n\n    Returns:\n        Order\n    \"\"\"\n    return Order.create(\n        action=action,\n        order_type=order_type,\n        price=price,\n        quantity=quantity,\n        security_identifier=security_identifier,\n        client=self.client,\n        owner_securities_account_id=self.id,\n        counter_party=counter_party\n    )\n</code></pre>"},{"location":"api_docs/user/","title":"User","text":""},{"location":"api_docs/user/#alpha_trader.user.User","title":"<code>User</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>User model</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>str</code> <p>ID of the user</p> <code>username</code> <code>str</code> <p>Username of the user</p> <code>email</code> <code>Union[str, None]</code> <p>Email of the user, only available for own user</p> <code>jwt_token</code> <code>Union[str, None]</code> <p>JWT token of the user, only available for own user</p> <code>email_subscription_type</code> <code>Union[str, None]</code> <p>Email subscription type of the user, only available for own user</p> <code>capabilities</code> <code>UserCapabilities</code> <p>Capabilities of the user</p> <code>gravatar_hash</code> <code>str</code> <p>Gravatar hash of the user</p> <code>ref_id</code> <code>str</code> <p>Ref ID of the user</p> <code>registration_date</code> <code>int</code> <p>Registration date of the user</p> <code>version</code> <code>int</code> <p>Version of the user</p> <code>my_user</code> <code>bool</code> <p>Flag if the user is my user</p> <code>client</code> <code>Client</code> <p>Client</p> Source code in <code>alpha_trader/user/__init__.py</code> <pre><code>class User(BaseModel):\n    \"\"\"\n    User model\n\n    Attributes:\n        id: ID of the user\n        username: Username of the user\n        email: Email of the user, only available for own user\n        jwt_token: JWT token of the user, only available for own user\n        email_subscription_type: Email subscription type of the user, only available for own user\n        capabilities: Capabilities of the user\n        gravatar_hash: Gravatar hash of the user\n        ref_id: Ref ID of the user\n        registration_date: Registration date of the user\n        version: Version of the user\n        my_user: Flag if the user is my user\n        client: Client\n    \"\"\"\n\n    id: str\n    username: str\n    email: Union[str, None]\n    jwt_token: Union[str, None]\n    email_subscription_type: Union[str, None]\n    capabilities: UserCapabilities\n    gravatar_hash: str\n    ref_id: str\n    registration_date: int\n    version: int\n    my_user: bool\n    client: Client\n\n    @staticmethod\n    def initialize_from_api_response(api_response: Dict, client: Client):\n        return User(\n            id=api_response[\"id\"],\n            username=api_response[\"username\"],\n            email=api_response.get(\"emailAddress\", None),\n            jwt_token=api_response.get(\"jwtToken\", None),\n            email_subscription_type=api_response.get(\"emailSubscriptionType\", None),\n            capabilities=UserCapabilities(\n                partner_id=api_response[\"userCapabilities\"].get(\"partnerId\", None),\n                achievement_count=api_response[\"userCapabilities\"][\"achievementCount\"],\n                achievement_total=api_response[\"userCapabilities\"][\"achievementTotal\"],\n                last_sponsoring_date=api_response[\"userCapabilities\"][\n                    \"lastSponsoringDate\"\n                ],\n                level_2_user_end_date=api_response[\"userCapabilities\"][\n                    \"level2UserEndDate\"\n                ],\n                locale=api_response[\"userCapabilities\"][\"locale\"],\n                premium_end_date=api_response[\"userCapabilities\"][\"premiumEndDate\"],\n                sponsored_hours=api_response[\"userCapabilities\"][\"sponsoredHours\"],\n                team_department=api_response[\"userCapabilities\"][\"teamDepartment\"],\n                team_role=api_response[\"userCapabilities\"][\"teamRole\"],\n                team_role_description=api_response[\"userCapabilities\"][\n                    \"teamRoleDescription\"\n                ],\n                level_2_user=api_response[\"userCapabilities\"][\"level2User\"],\n                partner=api_response[\"userCapabilities\"][\"partner\"],\n                premium=api_response[\"userCapabilities\"][\"premium\"],\n            ),\n            gravatar_hash=api_response[\"gravatarHash\"],\n            ref_id=api_response[\"refId\"],\n            registration_date=api_response[\"registrationDate\"],\n            version=api_response[\"version\"],\n            my_user=api_response[\"myUser\"],\n            client=client,\n        )\n\n    @property\n    def achievements(self) -&gt; List[Achievement]:\n        \"\"\"\n            Achievements of the user\n\n        Returns:\n            List of achievements\n        \"\"\"\n        response = self.client.request(\n            \"GET\", f\"api/v2/userachievements/{self.username}\"\n        )\n\n        logger.info(\"Retrieved achievements for user\")\n\n        return [\n            Achievement.initialize_from_api_response(res, self.client)\n            for res in response.json()\n        ]\n\n    @property\n    def securities_account(self):\n        \"\"\"\n            Get the securities account for the user\n\n        Returns:\n            Securities account\n        \"\"\"\n        if not self.my_user:\n            raise Exception(\"Cannot retrieve securities account for other users\")\n\n        response = self.client.request(\"GET\", \"api/v2/my/securitiesaccount\")\n\n        return SecuritiesAccount.initialize_from_api_response(\n            response.json(), self.client\n        )\n\n    def found_company(\n        self,\n        company_name: str,\n        cash_deposit: float,\n        custom_number_of_shares: Union[int, None] = None,\n        custom_asin: Union[str, None] = None,\n    ) -&gt; Company:\n        \"\"\"\n            Found a company\n        Args:\n            company_name: Name of the company\n            cash_deposit: Initial cash that should be deposited to the company\n            custom_number_of_shares: Custom number of shares (premium feature)\n            custom_asin: Custom ASIN (premium feature)\n\n        Returns:\n            Company\n        \"\"\"\n        from alpha_trader.company import Company\n\n        data = {\n            \"name\": company_name,\n            \"cashDeposit\": cash_deposit,\n            \"customNumberOfShares\": custom_number_of_shares,\n            \"customAsin\": custom_asin,\n        }\n\n        response = self.client.request(\"POST\", \"api/companies\", data=data)\n\n        return Company.initialize_from_api_response(response.json(), self.client)\n\n    @property\n    def companies(self) -&gt; List[Company]:\n        \"\"\"\n            Get all companies that the user is CEO of\n        Returns:\n            List of companies\n        \"\"\"\n        from alpha_trader.company import Company\n\n        response = self.client.request(\"GET\", f\"api/companies/ceo/userid/{self.id}\")\n\n        return [\n            Company.initialize_from_api_response(res, self.client)\n            for res in response.json()\n        ]\n\n    @property\n    def salary(self) -&gt; float:\n        \"\"\"\n            Get the daily salary for the user\n        Returns:\n            Daily salary\n        \"\"\"\n        response = self.client.request(\"GET\", f\"api/v2/possibledailysalary/{self.id}\")\n\n        return response.json()[\"value\"]\n\n    @property\n    def bank_account(self) -&gt; BankAccount:\n        \"\"\"\n            Get the bank account for the user\n        Returns:\n            Bank account\n        \"\"\"\n        if not self.my_user:\n            raise Exception(\"Cannot retrieve bank account for other users\")\n\n        response = self.client.request(\"GET\", \"api/v2/my/bankaccounts/\")\n\n        return BankAccount.initialize_from_api_response(response.json()[0], self.client)\n\n    def retrieve_salary(self) -&gt; None:\n        \"\"\"\n            Retrieve all the salaries for the user\n        Returns:\n            None\n\n        \"\"\"\n        if not self.my_user:\n            raise Exception(\"Cannot retrieve salary for other users.\")\n\n        response = self.client.request(\"PUT\", \"api/v2/my/salarypayments\")\n\n        if response.status_code == 200:\n            logger.info(\"Successfully retrieved salary\")\n</code></pre>"},{"location":"api_docs/user/#alpha_trader.user.User.achievements","title":"<code>achievements: List[Achievement]</code>  <code>property</code>","text":"<pre><code>Achievements of the user\n</code></pre> <p>Returns:</p> Type Description <code>List[Achievement]</code> <p>List of achievements</p>"},{"location":"api_docs/user/#alpha_trader.user.User.bank_account","title":"<code>bank_account: BankAccount</code>  <code>property</code>","text":"<pre><code>Get the bank account for the user\n</code></pre> <p>Returns:     Bank account</p>"},{"location":"api_docs/user/#alpha_trader.user.User.companies","title":"<code>companies: List[Company]</code>  <code>property</code>","text":"<pre><code>Get all companies that the user is CEO of\n</code></pre> <p>Returns:     List of companies</p>"},{"location":"api_docs/user/#alpha_trader.user.User.salary","title":"<code>salary: float</code>  <code>property</code>","text":"<pre><code>Get the daily salary for the user\n</code></pre> <p>Returns:     Daily salary</p>"},{"location":"api_docs/user/#alpha_trader.user.User.securities_account","title":"<code>securities_account</code>  <code>property</code>","text":"<pre><code>Get the securities account for the user\n</code></pre> <p>Returns:</p> Type Description <p>Securities account</p>"},{"location":"api_docs/user/#alpha_trader.user.User.found_company","title":"<code>found_company(company_name, cash_deposit, custom_number_of_shares=None, custom_asin=None)</code>","text":"<pre><code>Found a company\n</code></pre> <p>Args:     company_name: Name of the company     cash_deposit: Initial cash that should be deposited to the company     custom_number_of_shares: Custom number of shares (premium feature)     custom_asin: Custom ASIN (premium feature)</p> <p>Returns:</p> Type Description <code>Company</code> <p>Company</p> Source code in <code>alpha_trader/user/__init__.py</code> <pre><code>def found_company(\n    self,\n    company_name: str,\n    cash_deposit: float,\n    custom_number_of_shares: Union[int, None] = None,\n    custom_asin: Union[str, None] = None,\n) -&gt; Company:\n    \"\"\"\n        Found a company\n    Args:\n        company_name: Name of the company\n        cash_deposit: Initial cash that should be deposited to the company\n        custom_number_of_shares: Custom number of shares (premium feature)\n        custom_asin: Custom ASIN (premium feature)\n\n    Returns:\n        Company\n    \"\"\"\n    from alpha_trader.company import Company\n\n    data = {\n        \"name\": company_name,\n        \"cashDeposit\": cash_deposit,\n        \"customNumberOfShares\": custom_number_of_shares,\n        \"customAsin\": custom_asin,\n    }\n\n    response = self.client.request(\"POST\", \"api/companies\", data=data)\n\n    return Company.initialize_from_api_response(response.json(), self.client)\n</code></pre>"},{"location":"api_docs/user/#alpha_trader.user.User.retrieve_salary","title":"<code>retrieve_salary()</code>","text":"<pre><code>Retrieve all the salaries for the user\n</code></pre> <p>Returns:     None</p> Source code in <code>alpha_trader/user/__init__.py</code> <pre><code>def retrieve_salary(self) -&gt; None:\n    \"\"\"\n        Retrieve all the salaries for the user\n    Returns:\n        None\n\n    \"\"\"\n    if not self.my_user:\n        raise Exception(\"Cannot retrieve salary for other users.\")\n\n    response = self.client.request(\"PUT\", \"api/v2/my/salarypayments\")\n\n    if response.status_code == 200:\n        logger.info(\"Successfully retrieved salary\")\n</code></pre>"},{"location":"api_docs/user/#alpha_trader.user.UserCapabilities","title":"<code>UserCapabilities</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>User capabilities model</p> <p>Attributes:</p> Name Type Description <code>partner_id</code> <code>Union[str, None]</code> <p>Partner ID of the user</p> <code>achievement_count</code> <code>Union[None, int]</code> <p>Achievement count of the user</p> <code>achievement_total</code> <code>Union[None, int]</code> <p>Achievement total of the user</p> <code>last_sponsoring_date</code> <code>Union[None, str]</code> <p>Last sponsoring date of the user</p> <code>level_2_user_end_date</code> <code>Union[None, str]</code> <p>Level 2 user end date of the user</p> <code>locale</code> <code>str</code> <p>Locale of the user</p> <code>premium_end_date</code> <code>Union[None, int]</code> <p>Premium end date of the user</p> <code>sponsored_hours</code> <code>int</code> <p>Sponsored hours of the user</p> <code>team_department</code> <code>Union[None, str]</code> <p>Team department of the user</p> <code>team_role</code> <code>str</code> <p>Team role of the user</p> <code>team_role_description</code> <code>Union[None, str]</code> <p>Team role description of the user</p> <code>level_2_user</code> <code>bool</code> <p>Level 2 user of the user</p> <code>partner</code> <code>bool</code> <p>Flag if the user is a partner</p> <code>premium</code> <code>bool</code> <p>Flag if the user is premium</p> Source code in <code>alpha_trader/user/__init__.py</code> <pre><code>class UserCapabilities(BaseModel):\n    \"\"\"\n    User capabilities model\n\n    Attributes:\n        partner_id: Partner ID of the user\n        achievement_count: Achievement count of the user\n        achievement_total: Achievement total of the user\n        last_sponsoring_date: Last sponsoring date of the user\n        level_2_user_end_date: Level 2 user end date of the user\n        locale: Locale of the user\n        premium_end_date: Premium end date of the user\n        sponsored_hours: Sponsored hours of the user\n        team_department: Team department of the user\n        team_role: Team role of the user\n        team_role_description: Team role description of the user\n        level_2_user: Level 2 user of the user\n        partner: Flag if the user is a partner\n        premium: Flag if the user is premium\n    \"\"\"\n\n    partner_id: Union[str, None]\n    achievement_count: Union[None, int]\n    achievement_total: Union[None, int]\n    last_sponsoring_date: Union[None, str]\n    level_2_user_end_date: Union[None, str]\n    locale: str\n    premium_end_date: Union[None, int]\n    sponsored_hours: int\n    team_department: Union[None, str]\n    team_role: str\n    team_role_description: Union[None, str]\n    level_2_user: bool\n    partner: bool\n    premium: bool\n</code></pre>"}]}